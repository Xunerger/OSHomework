#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
#include<string.h>

int main()
{
	//
	// 数组名是首元素地址，以下两种情况除外
	// 1.sizeof(数组名) - 数组名表示整个数组
	// 2.&数组名 - 数组名表示整个数组
	// 
	//一维数组
	//int a[] = { 1,2,3,4 };//4*4=16
	//printf("%d\n",sizeof(a));//sizeof(数组名）-计算的是数组总大小 - 单位是字节 -  16
	//printf("%d\n", sizeof(a + 0));	//4 - 数组名这里表示首元素地址， a+0 还是首元素地址，地址大小就是4/8个字节
	//printf("%d\n", sizeof(*a));		//4 - 数组名表示首元素地址， *a就是首元素，sizeof(*a)就是4
	//printf("%d\n", sizeof(a + 1));	//4 - 数组名表示首元素地址，a+1是第二个元素地址，地址大小就是4/8个字节
	//printf("%d\n", sizeof(a[1]));	//4 - 第二个元素的大小
	//printf("%d\n", sizeof(&a));		//4/8 - &a取出的是数组的地址，但是数组的地址也是地址，地址的大小就是4/8个字节
	//printf("%d\n", sizeof(*&a));	//16 - &a数组的地址，数组的地址解引用访问的数组，sizeof计算的就是数组的大小，单位是字节
	//printf("%d\n", sizeof(&a + 1));	//4/8 - &a是数组的地址，&a+1虽然地址跳过整个数组，但是还是地址，所以还是4/8个字节
	//printf("%d\n", sizeof(&a[0]));	//4/8 &a是第一个元素的地址
	//printf("%d\n", sizeof(&a[0] + 1));	//4/8 &a[0]+1 是第二个元素的地址

	//字符数组
	//char arr[] = { 'a','b','c','d','e','f' };
	//printf("%d\n", sizeof(arr));					//6 sizeof计算的是数组大小，6*1=6
	//printf("%d\n", sizeof(arr + 0));				//4/8 arr表示首元素地址,arr+0还是首元素地址，地址的大小是4/8个字节
	//printf("%d\n", sizeof(*arr));					//1 arr是首元素地址，*arr是首元素，首元素是字符，大小是一个字节
	//printf("%d\n", sizeof(arr[1]));				//1 arr[1]表示第二个元素
	//printf("%d\n", sizeof(&arr));					//4/8 &arr是数组的地址，地址是4/8个字节
	//printf("%d\n", sizeof(&arr + 1));				//4/8 &aar+1是跳过整个数组后的地址，地址大小是4/8个字节
	//printf("%d\n", sizeof(&arr[0] + 1));			//4/8 &arr+1是第二个元素的地址，地址的大小是4/8个字节

	//strlen()求数组长度的原理 - 找到第一个'\0'
	//char arr[] = { 'a','b','c','d','e','f' };
	//printf("%d\n", strlen(arr));					//随机值
	//printf("%d\n", strlen(arr + 0));				//随机值
	////printf("%d\n", strlen(*arr));					//错误写法，会发生读取位置冲突 'a'-97-读取位置0x00000061时发生冲突
	////printf("%d\n", strlen(arr[1]));				//错误写法，和上一个错误类似
	//printf("%d\n", strlen(&arr));					//随机值，和前两个随机值一样
	//printf("%d\n", strlen(&arr + 1));				//随机值，与前三个随机值少6
	//printf("%d\n", strlen(&arr[0] + 1));			//随机值，比前三个随机值少1

	//char arr[] = "abcdef";
	//printf("%d\n", sizeof(arr));					//7 sizeof计算的是数组大小，6*1=6
	//printf("%d\n", sizeof(arr + 0));				//4/8 arr表示首元素地址,arr+0还是首元素地址，地址的大小是4/8个字节
	//printf("%d\n", sizeof(*arr));					//1 arr是首元素地址，*arr是首元素，首元素是字符，大小是一个字节
	//printf("%d\n", sizeof(arr[1]));				//1 arr[1]表示第二个元素
	//printf("%d\n", sizeof(&arr));					//4/8 &arr是数组的地址，地址是4/8个字节
	//printf("%d\n", sizeof(&arr + 1));				//4/8 &aar+1是跳过整个数组后的地址，地址大小是4/8个字节
	//printf("%d\n", sizeof(&arr[0] + 1));			//4/8 &arr+1是第二个元素的地址，地址的大小是4/8个字节

	//char arr[] = "abcdef";							//a b c d e f \0
	//printf("%d\n", strlen(arr));					//6
	//printf("%d\n", strlen(arr + 0));				//6
	//printf("%d\n", strlen(*arr));					//错误写法，会发生读取位置冲突 'a'-97-读取位置0x00000061时发生冲突
	//printf("%d\n", strlen(arr[1]));				//错误写法，和上一个错误类似
	//printf("%d\n", strlen(&arr));					//6 但会出现警告 &arr - 数组的地址 - 数组指针 char (*p)[7]  = &arr ,strlen 的参数类型是const char*
	//printf("%d\n", strlen(&arr + 1));				//随机值，也会出现警告，和上一个警告一样
	//printf("%d\n", strlen(&arr[0] + 1));			//5 ，也会出现警告，和上一个警告一样

	//char* p = "abcdef";
	//printf("%d\n", sizeof(p));					//4/8 sizeof计算的是指针变量p的大小
	//printf("%d\n", sizeof(p + 1));				//4/8 p+1 得到的是字符b的地址，地址的大小是4/8个字节
	//printf("%d\n", sizeof(*p));					//1 p是首元素地址，*p是首元素，首元素是字符，大小是一个字节
	//printf("%d\n", sizeof(p[0]));				//1 arr[0]表示首元素  int arr[10]; arr[0]==*(arr+0)  p[0]==*(p+0)=='a'
	//printf("%d\n", sizeof(&p));					//4/8 &p是指针p的地址，地址是4/8个字节
	//printf("%d\n", sizeof(&p + 1));				//4/8 &p+1是跳过&p的地址，地址大小是4/8个字节
	//printf("%d\n", sizeof(&p[0] + 1));			//4/8 p[0]==*p, &p[0]==&(*p)==p ,是地址，地址的大小是4/8个字节

	//char* p = "abcdef";								//a b c d e f \0
	//printf("%d\n", strlen(p));						//6
	//printf("%d\n", strlen(p + 1));					//5
	////printf("%d\n", strlen(*p));						//错误写法，会发生读取位置冲突 'a'-97-读取位置0x00000061时发生冲突
	////printf("%d\n", strlen(p[1]));					//错误写法，和上一个错误类似
	//printf("%d\n", strlen(&p));						//随机值
	//printf("%d\n", strlen(&p + 1));					//随机值
	//printf("%d\n", strlen(&p[0] + 1));				//5 ，也会出现警告，和上一个警告一样

	//二维数组
	int a[3][4] = { 0 };
	printf("%d\n", sizeof(a));							//48
	printf("%d\n", sizeof(a[0][0]));					//4
	printf("%d\n", sizeof(a[0]));						//16 a[0]相当于第一行作为一维数组的数组名
														//sizeof(arr[0])把数组名单独放在sizeof()内，计算的是第一行的大小

	printf("%d\n", sizeof(a[0] + 1));					//4/8 - a[0]是第一行的数组名，数组名此时是首元素地址，a[0]其实就是第一行第一个元素的地址
														//所以a[0]+1 就是第一行第二个元素的地址 - 地址大小是4/8个字节

	printf("%d\n", sizeof(*(a[0] + 1)));				//4 -  *(a[0] + 1)是第一行第二个元素，大小是4个字节
	printf("%d\n", sizeof(a + 1));						//4/8 - a是二维数组的数组名，没有sizeof()，也没有&， 所以a是首元素地址，
														//而把二维数组看成一维数组时，二维数组的首元素是他的第一行，a就是第一行（首元素）的地址
														//a+1就是第二行的地址

	printf("%d\n", sizeof(*(a + 1)));					//16 - 计算第二行的大小，单位是字节
	printf("%d\n", sizeof(&a[0] + 1));					//4 - 第二行的地址
	printf("%d\n", sizeof(*(&a[0] + 1)));				//16 - 第二行的大小，单位是字节
	printf("%d\n", sizeof(*a));							//16 - a是首元素地址 - 第一行的地址，*a就是第一行，sizeof(*a)就是第一行的大小，单位是字节
	printf("%d\n", sizeof(a[3]));						//16 - sizeof()内部的表达式不会进行访问，只是计算表达式类型的大小，所以这里不会报错

	return 0;
}
